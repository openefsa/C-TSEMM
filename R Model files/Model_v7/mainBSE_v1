
MainDir="C:\\C-TSEMM\\"    						# Main root directory
wd="C:\\C-TSEMM\\R Model files\\Model_v7\\"   			# location of R files "working directory"
fileInput=(paste(MainDir,"Input Data Files\\",sep=""))    				# location of input folders
setwd(paste(MainDir,"User Start",sep="" ) )  						# go to folder containing User log
  UserInput = (read.csv(paste("User Log.csv"),header=FALSE,quote="" )  )   	# read in User Log   
  setwd(wd)												# set working directory
  MSnoTrend =  as.matrix(read.csv(paste("Alt Prevalence.csv",sep="") )  )   	# file containg countries which need alt data to fit trend and what dataset to use
  ChtToAge <-  (read.csv(paste("ChtToAge2.csv") ,row.names=1   )   )     	# table to convert by age data to by cohort data
    AgeToCht=t(ChtToAge) 
  ### Full test positive data - to estimate splits between HS/ES and CS/FS
 CSPosProxy<- (read.csv("CSPosProxy.csv"  ,header=TRUE ,row.names=1  )   )
 FSPosProxy<- (read.csv("FSPosProxy.csv"  ,header=TRUE ,row.names=1  )   )
 HSPosProxy<- (read.csv("HSPosProxy.csv"  ,header=TRUE ,row.names=1  )   )
 ESPosProxy<- (read.csv("ESPosProxy.csv"  ,header=TRUE ,row.names=1  )   )
  
runSeparate=unlist(strsplit(as.character(UserInput[1,1]),"\""))[2];           # run all countries or just selected ones
runValidation=UserInput[1,46]

##code if final position of log used =unlist(strsplit(as.character(UserInput[1,51]),"\""))[1];

MSList=as.matrix(unlist(strsplit(as.character(UserInput[1,3]), split="-")))   # list of all the countries to run the model on

ifelse(MSList=="EU25"||MSList=="EU27",runAllMS<-TRUE,runAllMS<-FALSE)				      # If MSList is equal to EU25 then designates that model should be run individually for all MSs
if (runAllMS==TRUE) MSList <- as.matrix(unlist(strsplit(as.character(UserInput[1,2]), split="-")))  # amend MSList if running on all MSs		
nMSList   = dim(MSList)[1]    								# number of countries/groupings in list
ifelse(runSeparate=="TRUE", nRun<-nMSList,nRun<-1)                            # number of individual countries to run the model for (only 1 if running merged)

#--------------------------------------------------------------------------------------------
#### Set up matrices to store results                                                   

numPosOut=matrix(0,nRun,6)  				# number of positive animals
BaselineDp=matrix(0,nRun,8)  				# number to test to acieve design prevalence
 	colnames(BaselineDp)=c("Member State","actual number HS tested",paste("Estimated baseline detectable prevalence, tau=",UserInput[1,15]),paste("Estimated baseline infection prevalence, tau=",UserInput[1,15]),paste("Estimated standing pop detection prevalence, tau=",UserInput[1,15]),"scenarioDetTestPop","scenarioInfTestPop","scenarioDetStandPop")
NumberToTest=matrix(0,nRun,8) 			# number to test to acieve design prevalence
	colnames(NumberToTest)=c("Member State","actual number HS tested",paste("Estimated HS to test for detectable design prevalence, tau=",UserInput[1,15]),paste("Estimated HS to test for infection design prevalence, tau=",UserInput[1,15]),paste("Estimated, standing pop, HS to test for detection design prevalence, tau=",UserInput[1,15]),"scenarioDetTestPop","scenarioInfTestPop","scenarioDetStandPop")
NumberMissedOut=matrix(0,nRun,7)  			# number missed
	colnames(NumberMissedOut)=c("MS","Actual baseline regime cases 2011 {HS,ES,FS,CS}", "Model baseline cases [CI]","Model scenario cases[CI]","Model Number cases missed (baseline-scenario)","Model Number Infected (Total data) [CI]","Model Scenario Infected [CI]")#,"Model Number Infected missed (baseline-scenario)")

incPrevOut<-matrix(0,nRun,9)                    # Emergence - output matrix	
fixedScenario=matrix(0,nRun,7)  		      # Emergence - internal for R
withinCI<-matrix(0,nRun,10)                     # confidence intervals

#################################################################################################
##                          MAIN  					              #######################
#################################################################################################

### Loop over all the independent MSs to run the model for (produce outputs for each independent MS)

for (q in 1:nRun) {

    	MS=as.character(MSList[q,])  #  Identify the MS(s) to run the model on
print(MS)
    	setwd(wd)                    #  set working directory
#-------------------------------------------------------------------------------------------------
#### Read in the other R source files
 
    	source("BSE_Functions_v7.R") #  Script containing various functions used in model - doesn't do anything until functions are called elsewhere
    	source("BSE_Parameters.R")   #  Script containing parameter values and R libraries - also reads in the input data files and amends them based on parameters such as strain type
    	source("Setup.R")            #  Script containing one time run code - sets up baseline/scenario input files                                                                                      
    	source("GetMLEs.R")          #  GetMLEs function depends on other functions - doesn't do anything until functions are called elsewhere
    	source("EstTrends.R")        #  Estimate outputs given trend line parameter values - doesn't do anything until functions are called elsewhere
    	source("designPrevalence.R") #  Design prevalence functions -doesn't do anything until functions are called elsewhere
#-------------------------------------------------------------------------------------------------
#### Calculate the number tested/test positive for full, baseline and scenario testing regimes
 
  tIn<-inputData(ageCapT,ageCapTend,prTestT)  	# full - actual data input 
  aIn<-inputData(ageCapA,ageCapAend,prTestA)    # adult population data.
  bIn<-inputData(ageCapB,ageCapBend,prTestB)  	# baseline input data
  sIn<-inputData(ageCapS,ageCapSend,prTestS)  	# scenario input data
  tPoisU<-poisInUCI(tIn,poU);          		# lower confidence inputs: full
  tPoisL<-poisInLCI(tIn,poL);          		# upper confidence inputs: full  
  bPoisU<-poisInUCI(bIn,poU);          		# lower confidence inputs: basline
  bPoisL<-poisInLCI(bIn,poL);          		# upper confidence inputs: baseline
  sPoisU<-poisInUCI(sIn,poU);          		# lower confidence inputs: scenario
  sPoisL<-poisInLCI(sIn,poL);          		# upper confidence inputs: scenario
  
  tPoisUu<-poisInUCI(tIn,poUu);    			#poUu'th value (e.g. 99th) for uncertainty about emergence: full
  tPoisUl<-poisInUCI(tIn,poUl);    			#poUl'th value (e.g. 95th) for uncertainty about emergence: full
  bPoisUu<-poisInUCI(tIn,poUu);    			#poUu'th value for uncertainty about emergence: basline
  bPoisUl<-poisInUCI(tIn,poUl);    			#poUl'th value for uncertainty about emergence: baseline
#-------------------------------------------------------------------------------------------------
#### Fitting Model 

## Determine whether it is appropriate to use exponential distribution for MS or whether Weibull is better fit  
	MSexp<-c("EU27","EU25","EU17","EU8","AT","BG","CY","CZ","EE","EL","FI","HU","LT","LU","LV","MT","RO","SE","SI","SK","NO","CH","HR","MK","IS","TR","AL","BA","KS","ME","RS") 
	ifelse(is.na(pmatch(MS,MSnoTrend)),Wbl<-1,Wbl<-0)
      if(MS=="SI") Wbl<-0
     Wbl<-0   #ensures always fit exponential distribution...hash out if want to fit weibull.
## Fit Model
	ifelse(Wbl==1,MLEout<-GetMLEs(parasWbl,tIn,tPoisU,tPoisL,Wbl) ,MLEout<-GetMLEs(paras,tIn,tPoisU,tPoisL,Wbl))     #run GetMLE's                             
  		parasKLci<-c(MLEout$paras[1:2],MLEout$KLci); parasKUci<-c(MLEout$paras[1:2],MLEout$KUci)	
		
	## Fit secondary model using poUu'th and poUl'th values for uncertainty about Emergence   
	ifelse(Wbl==1,MLEout2<-GetMLEs(parasWbl,tIn,tPoisUu,tPoisUl,Wbl) ,MLEout2<-GetMLEs(paras,tIn,tPoisUu,tPoisUl,Wbl))     #run GetMLE's                             
  
#-------------------------------------------------------------------------------------------------
#### Estimate Risk rates

  baseR<-RiskRate(MLEout$paras,Wbl)    		#baseline estimates
  lowerR<-RiskRate(MLEout$parasL,Wbl)   		#lower CI estimate
  upperR<-RiskRate(MLEout$parasU,Wbl)   		#upper CI estimate
	upperRu<-RiskRate(MLEout2$parasU,Wbl)   	#upper CI estimate: emergence
	upperRl<-RiskRate(MLEout2$parasL,Wbl)   	#lower CI estimate: emergence

#-------------------------------------------------------------------------------------------------
#### Estimate model predicted test positives (detected and infected)

  truePrev<-EstTrends(baseR,tIn)    		# full model estimates 
  lowerCIt<-EstTrends(lowerR,tPoisL)     		#lower 95% CI estimates (for observed test positive data)   
  upperCIt<-EstTrends(upperR,tPoisU)     		#upper 95% CI estimates (for observed test positive data)  
	truePrevUciU<-EstTrends(upperRu,tPoisUu)  #true model estimates: upper emergence
	truePrevUciL<-EstTrends(upperRl,tPoisUl)  #true model estimates: lower emergence
  truePrevD<-EstTrendsDead(baseR,tIn)    		#true model estimates : based on number dead
  	truePrevLciD<-EstTrendsDead(lowerR,tPoisL)#true model estimates lower CI: based on number dead 
	truePrevUciD<-EstTrendsDead(upperR,tPoisU)#true model estimates upper CI: based on number dead  	

adultPrev<-EstTrends(baseR,aIn)    		# adult cattle model estimates 

  baseline<-EstTrends(baseR,bIn)                #Baseline model estimates
	TotPos<-colSums(baseline$eTot)		#Total detected positives by testing period
  	TotPosTrue<-colSums(baseline$eTotTrue)    #Total infected animals by testing period
  lowerCI<-EstTrends(lowerR,bPoisL)             #lower 95% CI estimates (for observed test positive data)   
  upperCI<-EstTrends(upperR,bPoisU)             #upper 95% CI estimates (for observed test positive data)  
      upperCIu<-EstTrends(upperRu,bPoisUu)      #upper CI value: emergence 
	upperCIl<-EstTrends(upperRl,bPoisUl)      #lower CI value: emergence
  baselineD<-EstTrendsDead(baseR,bIn)    		#Baseline model estimates: based on number dead
  	lowerCID<-EstTrendsDead(lowerR,bPoisL)    #lower 95% CI estimates (for observed test positive data)   
  	upperCID<-EstTrendsDead(upperR,bPoisU)    #upper 95% CI estimates (for observed test positive data)  

  scenario<-EstTrends(baseR,sIn)                  #Scenario model estimates
  	lowerCIs<-EstTrends(lowerR,sPoisL)          #lower 95% CI estimates (for observed test positive data)   
  	upperCIs<-EstTrends(upperR,sPoisU)          #upper 95% CI estimates (for observed test positive data)   
  scenarioD<-EstTrendsDead(baseR,sIn)             #Scenario model estimates: based on number dead
	lowerCIsD<-EstTrendsDead(lowerR,sPoisL)     #lower 95% CI estimates (for observed test positive data) : based on number dead 
  	upperCIsD<-EstTrendsDead(upperR,sPoisU)     #upper 95% CI estimates (for observed test positive data) : based on number dead 
#-------------------------------------------------------------------------------------------------
if (runValidation==TRUE) {
##### Validation: output tables for estimates of detection/infection

  #baseline - detection 
  	TestPosOut<-matrix(0,8,nTest)
  	colnames(TestPosOut)<- testStart:testEnd
  	rownames(TestPosOut)<-c("Model HS","Model ES","Model FS","Model CS","Actual HS","Actual ES","Actual FS","Actual CS")
   	TestPosOut[1,]=colSums((baseline$eHS) );   TestPosOut[2,]=colSums((baseline$eES) )
   	TestPosOut[3,]=colSums((baseline$eFS) );   TestPosOut[4,]=colSums((baseline$eCS) )
	TestPosOut[5,]=colSums((tIn$HSTestPos) );   TestPosOut[6,]=colSums((tIn$ESTestPos) )
   	TestPosOut[7,]=colSums((tIn$FSTestPos) );   TestPosOut[8,]=colSums((tIn$CSTestPos) )
  #lower CI detection
  	TestPosOutL<-matrix(0,4,nTest)
  	colnames(TestPosOutL)<- testStart:testEnd
  	rownames(TestPosOutL)<-c("Model HS","Model ES","Model FS","Model CS")
   	TestPosOutL[1,]=colSums(qgamma(poL,baseline$eHS+1,rate=0,1));   TestPosOutL[2,]=colSums(qgamma(poL,baseline$eES+1,rate=0,1))
   	TestPosOutL[3,]=colSums(qgamma(poL,baseline$eFS+1,rate=0,1)); TestPosOutL[4,]=colSums(qgamma(poL,baseline$eCS+1,rate=0,1))
  #upper CI detection
  	TestPosOutU<-matrix(0,4,nTest)
  	colnames(TestPosOutU)<- testStart:testEnd
  	rownames(TestPosOutU)<-c("Model HS","Model ES","Model FS","Model CS")
   	TestPosOutU[1,]=colSums(qgamma(poU,baseline$eHS+1,rate=0,1));   TestPosOutU[2,]=colSums(qgamma(poU,baseline$eES+1,rate=0,1))
   	TestPosOutU[3,]=colSums(qgamma(poU,baseline$eFS+1,rate=0,1)); TestPosOutU[4,]=colSums(qgamma(poU,baseline$eCS+1,rate=0,1)) 

  #baseline - infection
  	InfPosOut<-matrix(0,4,nTest)
  	colnames(InfPosOut)<- testStart:testEnd
  	rownames(InfPosOut)<-c("Model HS","Model ES","Model FS","Model CS")
   	InfPosOut[1,]=colSums((truePrev$eHSTrue) );   InfPosOut[2,]=colSums((truePrev$eESTrue) )
   	InfPosOut[3,]=colSums((truePrev$eFSTrue) );   InfPosOut[4,]=colSums((truePrev$eCSTrue) ) 
  # number positive output 
  	numPosOut[q,1]=MS
  	numPosOut[q,2]=formatC(colSums(tIn$CSFSTestPos+tIn$HSESTestPos)[nTest],big.mark=",",format="f",digits=4) 
  	numPosOut[q,3]=formatC(colSums(TestPosOut)[nTest],big.mark=",",format="f",digits=4) 
  	numPosOut[q,4]=(paste("[",formatC(qgamma(poL,baseline$eTot+1,rate=0,1)[nTest],big.mark=",",format="f",digits=4),",",formatC(qgamma(poU,baseline$eTot+1,rate=0,1)[nTest],big.mark=",",format="f",digits=4),"]"))
  	numPosOut[q,5]=formatC(colSums(InfPosOut)[nTest],big.mark=",",format="f",digits=4)
  	numPosOut[q,6]=(paste("[",formatC(qgamma(poL,baseline$eTotTrue+1,rate=0,1)[nTest],big.mark=",",format="f",digits=4),",",formatC(qgamma(poU,baseline$eTotTrue+1,rate=0,1)[nTest],big.mark=",",format="f",digits=4),"]"))
  	colnames(numPosOut)=c("Member State","actual test positives","baseline test positives","baseline CI","baseline true positives","baseline true CI")
  	write.csv(TestPosOut,paste(outDirPrev,"/",MSName,"TestPosOutBaseline.csv",sep="")) 
  	write.csv(TestPosOutL,paste(outDirPrev,"/",MSName,"TestPosOutL.csv",sep="")) 
  	write.csv(TestPosOutU,paste(outDirPrev,"/",MSName,"TestPosOutU.csv",sep="")) 
  	write.csv(InfPosOut,paste(outDirPrev,"/",MSName,"InfPosOut.csv",sep="")) 

##### Validation: output table of Estimate of true/test PREVALENCE
   	TrueOut<-matrix(0,4,nCht)
  	colnames(TrueOut)<- chtStart:chtEnd
  	rownames(TrueOut)<-c("TestPrevEstimate (avg over last 3 testing periods, NA's due to no animals tested in last 3 years)","TruePrevEstimate(avg over last 3 testing periods)","TruelowerCI (avg over last 3 testing periods)","TrueupperCI (avg over last 3 testing periods)")
   	TrueOut[1,]=rowMeans((baseline$eTot/TotNumTest)[,(nTest-2):nTest],na.rm=TRUE )
   	TrueOut[2,]=rowMeans((baseline$eTotTrue/TotNumTest)[,(nTest-2):nTest],na.rm=TRUE  )
   	TrueOut[3,]=rowMeans((qgamma(poL,baseline$eTotTrue+1,rate=0,1)/TotNumTest)[,(nTest-2):nTest],na.rm=TRUE  )
   	TrueOut[4,]=rowMeans((qgamma(poU,baseline$eTotTrue+1,rate=0,1)/TotNumTest)[,(nTest-2):nTest],na.rm=TRUE  )
  	write.csv(TrueOut,paste(outDirPrev,"/",MSName,"PrevEsts.csv",sep="")) 

###Plot outputs: baseline, lower & upper parameter ouput CI's for CSFS, HSES and Total: 
  	plotCI(colSums(truePrev$eESCSFS),colSums(qgamma(poL,truePrev$eESCSFS+1,rate=0,1)),colSums(qgamma(poU,truePrev$eESCSFS+1,rate=0,1)),colSums(ESCSFSTestPos),paste(MSName,"ESCSFS.png"))
  	plotCI(colSums(truePrev$eHS),colSums(qgamma(poL,truePrev$eHS+1,rate=0,1)),colSums(qgamma(poU,truePrev$eHS+1,rate=0,1)),colSums(HSTestPos),paste(MSName,"HS.png"))
  	plotCI(colSums(truePrev$eTot),colSums(qgamma(poL,truePrev$eTot+1,rate=0,1)),colSums(qgamma(poU,truePrev$eTot+1,rate=0,1)),colSums(TotTestPos),paste(MSName,"Total.png"))
  ## Logged plots
  	plotCI(log10(colSums(truePrev$eESCSFS)+1),log10(colSums(qgamma(poL,truePrev$eESCSFS+1,rate=0,1))),log10(colSums(qgamma(poU,truePrev$eESCSFS+1,rate=0,1))),log10(colSums(ESCSFSTestPos)+1),paste(MSName,"ESCSFSLog.png"))
  	plotCI(log10(colSums(truePrev$eHS)+1),log10(colSums(qgamma(poL,truePrev$eHS+1,rate=0,1))),log10(colSums(qgamma(poU,truePrev$eHS+1,rate=0,1))),log10(colSums(HSTestPos)+1),paste(MSName,"HSLog.png"))
  	plotCI(log10(colSums(truePrev$eTot)+1),log10(colSums(qgamma(poL,truePrev$eTot+1,rate=0,1))),log10(colSums(qgamma(poU,truePrev$eTot+1,rate=0,1))),log10(colSums(TotTestPos)+1),paste(MSName,"TotalLog.png"))
 ## Infected animals
  	plotCI(colSums(truePrev$eHSTrue),colSums(qgamma(poL,truePrev$eHSTrue+1,rate=0,1)),colSums(qgamma(poU,truePrev$eHSTrue+1,rate=0,1)),colSums(truePrev$eHS),paste(MSName,"HSTrue.png"))
  	plotCI(colSums(truePrev$eTotTrue),colSums(qgamma(poL,truePrev$eTotTrue+1,rate=0,1)),colSums(qgamma(poU,truePrev$eTotTrue+1,rate=0,1)),colSums(truePrev$eTot),paste(MSName,"TrueTot.png"))  
}
 
#################################################################################################
##                          NUMBER MISSED  			              #######################
#################################################################################################

##### Individual MS outputs
    numMissedOut=matrix(0,14,nTest)
    colnames(numMissedOut)=colnames(TestStartIn)
    rownames(numMissedOut)=c("Number of cases detected: Baseline","Number of cases detected: Baseline Lci","Number of cases detected: Baseline Uci","Number of cases detected: Scenario","Number of cases detected: Scenario Lci","Number of cases detected: Scenario Uci","Number of infected animals: Total","Number of infected animals: Total Lci","Number of infected animals: Total Uci","Number of infected animals: Scenario","Number of infected animals: Scenario Lci","Number of infected animals: Scenario Uci","Number cases missed (baseline-scenario)","Number infected missed (total-scenario))")
  
    numMissedOut[1,]=colSums(baselineD$eTot)        #baseline test positives (e.g. >72 months HS, etc...)
    numMissedOut[2,]=colSums(qgamma(poL,baselineD$eTot+1,rate=0,1))         #lower CI - baseline
    numMissedOut[3,]=colSums(qgamma(poU,baselineD$eTot+1,rate=0,1))         #upper CI - basleine
    numMissedOut[4,]=colSums(scenarioD$eTot)        #scenario test positives
    numMissedOut[5,]=colSums(qgamma(poL,scenarioD$eTot+1,rate=0,1))        #lower CI - scenario test positives  
    numMissedOut[6,]=colSums(qgamma(poU,scenarioD$eTot+1,rate=0,1))        #upper CI - scenario test positives  
    numMissedOut[7,]=colSums(truePrevD$eTotTrue)           #test positives if test all animals in observed dataset
    numMissedOut[8,]=colSums(qgamma(poL,truePrevD$eTotTrue+1,rate=0,1))         
    numMissedOut[9,]=colSums(qgamma(poU,truePrevD$eTotTrue+1,rate=0,1))   
    numMissedOut[10,]=colSums(scenarioD$eTotTrue)         #scenario test positives
    numMissedOut[11,]=colSums(qgamma(poL,scenarioD$eTotTrue+1,rate=0,1))           #lower CI - scenario test positives  
    numMissedOut[12,]=colSums(qgamma(poU,scenarioD$eTotTrue+1,rate=0,1))           #upper CI - scenario test positives
    numMissedOut[13,]=numMissedOut[1,]-numMissedOut[4,]   #number missed by scenario (cf baseline)
    numMissedOut[14,]=numMissedOut[7,]-numMissedOut[10,]  #number missed by scenario (cf full)

if (runValidation==TRUE)    write.csv(numMissedOut,paste(outDirPrev,"/",MSName,"HistNumMissed.csv",sep="")) 
if (UserInput[1,24]==TRUE)   write.csv(numMissedOut[,nTest],paste(outDir,"/",MSName,"numMissed.csv",sep=""))

##### Save to global output matrix
    nmOut=numMissedOut[,nTest]   					#just take current testing period data
    NumberMissedOut[q,1]=MSName
NumberMissedOut[q,2]=paste(colSums(tIn$CSFSTestPos+tIn$HSESTestPos)[nTest],"{",colSums(tIn$HSTestPos)[nTest],colSums(tIn$ESTestPos)[nTest],colSums(tIn$FSTestPos)[nTest],colSums(tIn$CSTestPos)[nTest],"}")
NumberMissedOut[q,3]=paste(formatC(nmOut[1],digits=2),"[",formatC(nmOut[2],big.mark=",",digits=2),",",formatC(nmOut[3],format="f",digits=2) ,"]")                           
NumberMissedOut[q,4]=paste(formatC(nmOut[4],digits=2),"[",formatC(nmOut[5],big.mark=",",digits=2),",",formatC(nmOut[6],format="f",digits=2) ,"]")                                                        
NumberMissedOut[q,5]=paste(formatC(nmOut[1]-nmOut[4],digits=2),"[",formatC(nmOut[2]-nmOut[5],big.mark=",",digits=2),",",formatC(nmOut[3]-nmOut[6],format="f",digits=2) ,"]")
NumberMissedOut[q,6]=paste(formatC(nmOut[7],digits=2),"[",formatC(nmOut[8],big.mark=",",digits=2),",",formatC(nmOut[9],format="f",digits=2) ,"]")                           
NumberMissedOut[q,7]=paste(formatC(nmOut[10],digits=2),"[",formatC(nmOut[11],big.mark=",",digits=2),",",formatC(nmOut[12],format="f",digits=2) ,"]")                           

if (runValidation==TRUE)    write.csv(numMissedOut,paste(outDirPrev,"/",MSName,"HistNumMissed.csv",sep="")) 
if (UserInput[1,24]==TRUE)   write.csv(numMissedOut[,nTest],paste(outDir,"/",MSName,"numMissed.csv",sep=""))

######################################################
########## Number of infected animals by Age (or Cohort) Output ##############################
#######################################################
 
    ChtToAge2 <-  (read.csv(paste("ChtToAge_1203.csv") ,row.names=1   )   )         #Fix to provide extended cohort to age matrix conversions
    ChtToAge3 <-  (read.csv(paste("ChtToAge3.csv") ,row.names=1   )   )
    AgeToCht2<-t(ChtToAge2)
    nAgeGrp2=dim(ChtToAge2)[2]

    HSbyChtPos1203<- AgeConv1203(HSbyAgePos)                #New conversion matrices for HSPos to get to Cohort data
    ESbyChtPos1203<- AgeConv1203(ESbyAgePos)                #New conversion matrices for ESPos to get to Cohort data
    
  
if(UserInput[1,49]==TRUE && UserInput[1,47]==TRUE && UserInput[1,50]==TRUE) source("BaselineNumInfAgeHSES.R")
if(UserInput[1,49]==TRUE && UserInput[1,47]==TRUE && UserInput[1,51]==TRUE) source("BaselineNumInfCohortHSES.R")
if(UserInput[1,49]==TRUE && UserInput[1,48]==TRUE && UserInput[1,50]==TRUE) source("HistNumInfAgeHSES.R")
if(UserInput[1,49]==TRUE && UserInput[1,48]==TRUE && UserInput[1,51]==TRUE) source("HistNumInfCohortHSES.R")

#################################################################################################
##                  DESIGN PREVALENCE: under current system.              #######################
#################################################################################################    

#### Estimate 'design prevalence'; i.e. the value of dp for which the observed number of animals tested in each stream most closely resembles the
#### number of animals that need to be tested to achieve the dp.

##------------- Calculation for prevalence in Standing population ---------------------------------------
 #-------------------------------------------------------------------------------------------------
  
bNowDet<-nDetect(bIn,baseline,'baseline',adultPrev,'det',0)
  bNowInf<-nDetect(bIn,baseline,'baseline',adultPrev,'inf',0)
standNowDet<-nDetect(bIn,baseline,'baseline',adultPrev,'det',1)

sNowDet<-nDetect(sIn,scenario,'scenario',adultPrev,'det',0)
  sNowInf<-nDetect(sIn,scenario,'scenario',adultPrev,'inf',0)
standNowDetS<-nDetect(sIn,scenario,'scenario',adultPrev,'det',1)

   BaselineDp[q,1]=MSName
   BaselineDp[q,2]=bNowDet$nDetOut[q,6]    #actual number of HS tested
   BaselineDp[q,3]=bNowDet$nDetOut[q,5]    #Estimated detection design prevalence
   BaselineDp[q,4]=bNowInf$nDetOut[q,5]    #Estimated infection design prevalence
   BaselineDp[q,5]=standNowDet$nDetOut[q,5]    #Estimated detection desing prevalence based on standing population prevalence
   BaselineDp[q,6]=sNowDet$nDetOut[q,5]    #Estimated detection design prevalence in standing population..assuming no testing of other streams
BaselineDp[q,7]=sNowInf$nDetOut[q,5]    #Estimated detection design prevalence in standing population..assuming no testing of other streams...scenario 
BaselineDp[q,8]=standNowDetS$nDetOut[q,5]    #Estimated detection design prevalence in standing population..assuming no testing of other streams...scenario

#################################################################################################
##         DESIGN PREVALENCE: Number To Test to achieve 1 in 100,000.     #######################
#################################################################################################    

    dpDetB<-designPrev(bIn,baseline,'baseline',adultPrev,ageCapStrB,prTestB,"det",0)  
    dpInfB<-designPrev(bIn,baseline,'baseline',adultPrev,ageCapStrB,prTestB,"inf",0)
    dpDetStand<-designPrev(bIn,baseline,'baseline',adultPrev,ageCapStrB,prTestB,"det",1) 

dpDetS<-designPrev(sIn,scenario,'scenario',adultPrev,ageCapStrS,prTestS,"det",0)  
    dpInfS<-designPrev(sIn,scenario,'scenario',adultPrev,ageCapStrS,prTestS,"inf",0)
 dpDetStandS<-designPrev(sIn,scenario,'scenario',adultPrev,ageCapStrS,prTestS,"det",1) 

   NumberToTest[q,1]=MSName
   NumberToTest[q,2]=formatC(as.numeric(dpDetB$nToTest[4,1]),big.mark=",",format="f",digits=0)     	#actual number of HS tested
   NumberToTest[q,3]=formatC(as.numeric(dpDetB$nToTest[5,1]),big.mark=",",format="f",digits=0)   	#Estimated HS to test for a detectable design prevalence of 1 in 100,000 
   NumberToTest[q,4]=formatC(as.numeric(dpInfB$nToTest[5,1]),big.mark=",",format="f",digits=0)      	#Estimated HS to test for an infection prevalence of 1 in 100,000
   NumberToTest[q,5]=formatC(as.numeric(dpDetStand$nToTest[5,1]),big.mark=",",format="f",digits=0)      	#Estimated HS to test,based on Standing Population prevalence, for a detction prevalence of 1 in 100,000
   NumberToTest[q,6]=formatC(as.numeric(dpDetS$nToTest[7,1]),big.mark=",",format="f",digits=0)      	#Estimated number to test in Standing Population, for a detction prevalence of 1 in 100,000
   NumberToTest[q,7]=formatC(as.numeric(dpInfS$nToTest[7,1]),big.mark=",",format="f",digits=0)      	#Estimated number to test in Standing Population, for a detction prevalence of 1 in 100,000
   NumberToTest[q,8]=formatC(as.numeric(dpDetStandS$nToTest[7,1]),big.mark=",",format="f",digits=0)      	#Estimated number to test in Standing Population, for a detction prevalence of 1 in 100,000

#################################################################################################
##                        EMERGENCE                                       #######################
#################################################################################################    
if(UserInput[1,25]==TRUE && UserInput[1,52]==TRUE) {                  #use flat increase in prevalence 
   #flat increase: v1, May - Sep 2012 NOT UPDATED 2013
    trendUp=colSums(upperCI$eTot)[nTest];     #upper confidence limit value(97.5)
    trendUpU=colSums(upperCIu$eTot)[nTest];   #upper confidence limit value (99)
    trendUpL=colSums(upperCIl$eTot)[nTest];   #upper confidence limit value (95)
  
    trendInc[1]<-colSums(baseline$eTot)[nTest]           #Number of detected cases in current year: baseline
    trendIncS[1]<-colSums(scenario$eTot)[nTest]          #Number of detected cases in current year: scenario
    trendIncTrue[1]<-colSums(truePrev$eTotTrue)[nTest]   #Number of infected animals in current year: baseline
    trendIncTrueS[1]<-colSums(truePrev$eTotTrue)[nTest]  #Number of infected animals in current year: scenario
  
    EmerBase<-Emergence(trendInc,trendIncTrue,trendUp)     #Emergence Results: baseline
    EmerBaseL<-Emergence(trendInc,trendIncTrue, trendUpL)  #Emergence Results: baseline - lower CI
    EmerBaseU<-Emergence(trendInc,trendIncTrue,trendUpU)   #Emergence Results: baseline - upper CI
  
    EmerScen<-Emergence(trendIncS,trendIncTrueS,trendUp)   #Emergence Results: scenario 
    EmerScenL<-Emergence(trendIncS,trendIncTrueS,trendUpL) #Emergence Results: scenario - upper CI
    EmerScenU<-Emergence(trendIncS,trendIncTrueS,trendUpU) #Emergence Results: scenario - lower CI
    #-------------------- Print outputs --------------------------------------------
  #######Outputs with confidence intervals
  #    incPrevOut[q,1]=MSName
  #    incPrevOut[q,2]=incRate*100
  #    incPrevOut[q,3]=paste(formatC(trendInc[1],digits=2,format="f",big.mark=","),",",formatC(trendIncS[1],digits=2,format="f",big.mark=","))
  #    incPrevOut[q,4]=paste(formatC(trendUp,digits=2,format="f",big.mark=","),"[",formatC(trendUpL,digits=2,format="f"),",",formatC(trendUpU,digits=2,format="f"),"]")
  #    incPrevOut[q,5]=paste(EmerBase$tFail,"[",EmerBaseL$tFail,",",EmerBaseU$tFail,"]",",",EmerScen$tFail,"[",EmerScenL$tFail,",",EmerScenU$tFail,"]")
  #    incPrevOut[q,6]=paste(formatC(EmerScen$nPos-EmerBase$nPos,digits=2,format="f"),"[",formatC(EmerScenL$nPos-EmerBaseL$nPos,digits=2,format="f"),",",formatC(EmerScenU$nPos-EmerBaseU$nPos,digits=2,format="f"),"]")
  #    incPrevOut[q,7]=paste(formatC(EmerScen$nPosTrue-EmerBase$nPosTrue,digits=2,format="f",big.mark=","),"[",formatC(EmerScenL$nPosTrue-EmerBaseL$nPosTrue,digits=2,format="f"),",",formatC(EmerScenU$nPosTrue-EmerBaseU$nPosTrue,digits=2,format="f",),"]")
  #    incPrevOut[q,8]=paste("(",formatC(EmerBase$nPos,digits=2,format="f",big.mark=","),",",formatC(EmerScen$nPos,digits=2,format="f",big.mark=","),")")
  #    incPrevOut[q,9]=paste("(",formatC(EmerBase$nPosTrue,digits=2,format="f",big.mark=","),",",formatC(EmerScen$nPosTrue,digits=2,format="f",big.mark=","),")")
  
  ###Outputs without confidence intervals
      incPrevOut[q,1]=MSName
      incPrevOut[q,2]=incRate*100
      incPrevOut[q,3]=paste(formatC(trendInc[1],digits=2,format="f",big.mark=","),",",formatC(trendIncS[1],digits=2,format="f",big.mark=","))
      incPrevOut[q,4]=paste(formatC(trendUp,digits=2,format="f",big.mark=","))
      incPrevOut[q,5]=paste(EmerBase$tFail,",",EmerScen$tFail)
      incPrevOut[q,6]=paste(formatC(EmerBase$nPos,digits=2,format="f",big.mark=","),",",formatC(EmerScen$nPos,digits=2,format="f",big.mark=","))
      incPrevOut[q,7]=paste(formatC(EmerScen$nPos-EmerBase$nPos,digits=2,format="f"))
      incPrevOut[q,8]=paste(formatC(EmerBase$nPosTrue,digits=2,format="f",big.mark=","),",",formatC(EmerScen$nPosTrue,digits=2,format="f",big.mark=","))           
      incPrevOut[q,9]=paste(formatC(EmerScen$nPosTrue-EmerBase$nPosTrue,digits=2,format="f",big.mark=","))  
   
    colnames(incPrevOut)=c("MS","Rate of increase per year (%)", "Current number test positives (baseline, scenario)", paste("Upper CI limit (",poU,")"),"Years to cross upper limit (baseline, scenario)","Total test positives at detection (baseline,scenario)","Number extra cases under scenario before detection","Total infected at detection (baseline, scenario)", "Number extra infected animals dead before detection (scenario-baseline)")
  if (UserInput[1,52]==TRUE)  write.csv(incPrevOut[q,2:9],paste(outDir,"/",MSName,"Emergence.csv",sep=""))
 }
 #------ ---- --- -- -- -- -- --- -- --- --- -- -- -- -- --- ------  ---- -- - - 
  if(UserInput[1,25]==TRUE && UserInput[1,53]==TRUE) {      #cohort based increase: v2, May/June 2013
    source("chtEmergence2b.R")
    ## number detected at which we determine we have 'identified' the increase             
    trendUp=UserInput[1,26]               # user specified number of detected cases 
 #**********************************************************************************************
 # ----------------------  inital calculations ---------------------------------   
## Split up to CS & FS - based on prop test positive
#no CS test pos in 2011 so just use pCSTestPosEU25
if (UserInput[1,57]==TRUE) {
   splitBase<-prTestEU25(prTestB,ageCapB,ageCapBend,1) ;  splitScen<-prTestEU25(prTestS,ageCapS,ageCapSend,1)  ;splitTrue<-prTestEU25(prTestT,ageCapT,ageCapTend,1) 
   splitMeth="avg 2002-2011"
}
if (UserInput[1,56]==TRUE) {
   splitBase<-prTestEU25(prTestB,ageCapB,ageCapBend,2) ;  splitScen<-prTestEU25(prTestS,ageCapS,ageCapSend,2)  ;splitTrue<-prTestEU25(prTestT,ageCapT,ageCapTend,2) 
   splitMeth="avg 2002-2004"
}
if (UserInput[1,58]==TRUE) {
   splitBase<-prTestEU25(prTestB,ageCapB,ageCapBend,3) ;  splitScen<-prTestEU25(prTestS,ageCapS,ageCapSend,3)  ;splitTrue<-prTestEU25(prTestT,ageCapT,ageCapTend,3) 
   splitMeth="avg 2008-2011"
}
  print(splitMeth)
      chtEmerBase<-chtEmergence2b(baselineD,truePrevD,upperCI,"base",bIn,trendUp,MLEout$paras,splitBase)     # baseline calculations
      chtEmerScen<-chtEmergence2b(scenarioD,truePrevD,upperCI,"scen",sIn,trendUp,MLEout$paras,splitScen)     # scenario calculations
    # --- summary Output - comparing baseline & scenario ----------------------------       
    timeToDet<-matrix(0,7,3)
    timeToDet[1,]=c(chtEmerBase$yrDet,chtEmerScen$yrDet,chtEmerBase$yrDet-chtEmerScen$yrDet)
    timeToDet[2,]=c(chtEmerBase$yrDetLci,chtEmerScen$yrDetLci,chtEmerBase$yrDetLci-chtEmerScen$yrDetLci)
    timeToDet[3,]=c(chtEmerBase$yrDetUci,chtEmerScen$yrDetUci,chtEmerBase$yrDetUci-chtEmerScen$yrDetUci)
    timeToDet[4,]=c(trendUp,trendUp,"NA")
    timeToDet[5,]=c(paste(emerAgeStart,"-",emerAgeEnd),paste(emerAgeStart,"-",emerAgeEnd),"NA")
    timeToDet[6,]=c(incRate,incRate, "NA")
    timeToDet[7,]=c(splitMeth,splitMeth, "NA")
    colnames(timeToDet)=c("baseline","Scenario","difference")
    rownames(timeToDet)=c("Expected number years to detection","Lower Poisson CI number years to detection","Upper Poisson CI number years to detection","number of cases needed for detection","start and end ages of animals tested","rate of increase","split Method")
    write.csv(timeToDet,paste(outDir,"/Emer2013/",MS,"timeToDet.csv",sep=""))
  
  } # end trendMeth==2
#} # end runEmer

}   # end for( q in 1:nRun)

#################################################################################################
##                        OUTPUTS                                         #######################
#################################################################################################  

#### October 2012 EFSA requested outputs
if (UserInput[1,13]==TRUE)	write.csv(BaselineDp,paste(mainOutDir,paste("/BaselineDp(tau",tau,")"),outSuff,".csv",sep=""))  			# Design prevalence - current system
if (UserInput[1,8]==TRUE )	  write.csv(NumberToTest,paste(mainOutDir,paste("/NumberToTest(tau=",tau,")"),outSuff,".csv",sep=""))  	# Design prevalence - 1 in 100,000
if (UserInput[1,24]==TRUE)	write.csv(NumberMissedOut,paste(mainOutDir,"/NumberMissed",outSuff,".csv",sep="")) 		                # Number Missed
if (UserInput[1,25]==TRUE && UserInput[1,52]==TRUE)  write.csv(incPrevOut,paste(mainOutDir,paste("/Emergence(",st,")"),outSuff,".csv",sep=""))		          # Emergence

##Alt NumMissed name showing Age of onset and test sensitivity
#if (UserInput[1,24]==TRUE)	write.csv(NumberMissedOut,paste(mainOutDir,"/NumberMissed(ts_",testA,")(Ao_",Onset[1],",",Onset[2],").csv",sep="")) 		# Number Missed

##### Other outputs (Validation)
 #	write.csv(numPosOut,paste(mainOutDir,"/numPos",outSuff,".csv",sep=""))                 	# Number of positive animals
#	write.csv(withinCI,paste(mainOutDir,"/withinCI",outSuff,".csv",sep="")) 			# is model within confidence limits

################################################################################
###### END MODEL ############################################################### 
################################################################################ 

q(save="no", runLast = F)