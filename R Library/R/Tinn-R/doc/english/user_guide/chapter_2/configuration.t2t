
== Configuration ==[basic_configuration]
This section provides information on Tinn-R configuration and associated applications.


=== Uninstall Tinn-R ===
- **ALWAYS UNISTALL ANY PRIOR VERSION OF Tinn-R BEFORE INSTALLING A NEW ONE!** Tinn-R has its own unistall option.
- The folder where Tinn-R project stores the ini files will not be removed when unistalling it. Why? Because whenever you install a different version all of your preferences will be preserved.
- You can check where these files are located in by checking //Help/Main/Ini files (path information)//. If you prefer to delete these settings by removing the entire folder manually. **All your preferences will be lost forever if you don't have a backup file**.


=== Install and configure Tinn-R and R ===[basic_configuration_installconfigure]
==== R: basic configuration ====
- Starting from version 1.18.X.X, ``Tinn-R requires R to run in SDI mode``. So, Tinn-R is not compatible neither with Rgui in MDI mode (only SDI) nor with S-PLUS. The latest compatible version was the historic 1.17.2.4.
- Starting from version 2.0.0.0, ``Tinn-R requires R to run either Rterm or Rgui in SDI mode``. There are four alternatives you can choose from: Rterm, Rgui in SDI mode, SciViews GUI (which  also requires R in SDI mode), or JGR.
- You have three basic options in order to switch Rgui from MDI to SDI:
 + In Rgui, select ``Edit/GUI preferences...``, set SDI and click on ``Save``, then ``OK`` without changing the name of the proposed file. Then, click ``OK`` or ``Cancel`` in the ``Rgui Configuration Editor`` (ignore any eventual messages), and restart Rgui (changes will not be taken into account in the current session).
 + Manually edit the file ``Rconsole``:
```
## Style
# This can be `yes' (for MDI) or `no' (for SDI).
MDI = no
```
 + Create a shortcut to R on your desktop (or anywhere that is convenient), and type in the switch ``--sdi`` after the ``...\Rgui.exe`` in the ``Target`` box. To do this, right click on your shortcut, select ``Properties`` and navigate to the ``Shortcut`` tab.


===== If you have any version of Tinn-R (<= 2.2.0.2) installed: =====
 + Uninstall previous versions of Tinn-R
 + Edit the file Rprofile.site (folder //etc// where you R is installed) and comment (or remove) all prior configuration scripts RELATED TO TINN-R
 + Start R
 + install the following packages:
  + TinnR (>= 1.0.3). TinnR package depends of Hmisc and R2HTML;
  + install.packages("svSocket", repos="http://R-Forge.R-project.org").
 + Close R
 + Install the new version of Tinn-R
 + Start Tinn-R
 + From the Tinn-R main menu, choose the option ``R/Configure/Permanent (Rprofile.site)``. It will write the following text to the file Rprofile.site:
```
##===============================================================
## Tinn-R: necessary packages and functions
## Tinn-R: >= 2.2.0.2 with TinnR package >= 1.0.3
##===============================================================
## Set the URL of the preferred repository, below some examples:
options(repos='http://software.rc.fas.harvard.edu/mirrors/R/') # USA
#options(repos='http://cran.ma.imperial.ac.uk/') # UK
#options(repos='http://brieger.esalq.usp.br/CRAN/') # Brazil

library(utils)

## Check necessary packages
necessary <- c('TinnR', 'svSocket')
installed <- necessary %in% installed.packages()[, 'Package']
if (length(necessary[!installed]) >=1)
  install.packages(necessary[!installed])

## Load packages
library(TinnR)
library(svSocket)

## Uncoment the two lines below if you want Tinn-R to always start R at start-up
## (Observation: check the path of Tinn-R.exe)
#options(IDE='C:/Tinn-R/bin/Tinn-R.exe')
#trStartIDE()

## Set options
options(use.DDE=T)

## Start DDE
trDDEInstall()

.trPaths <- paste(paste(Sys.getenv('APPDATA'), '\\Tinn-R\\tmp\\', sep=''),
            c('', 'search.txt', 'objects.txt', 'file.r', 'selection.r', 'block.r', 'lines.r'), sep='')
```
 + Start Rgui or Rterm from within Tinn-R, 
 + Read the content from the links below:
  - //[Card #basic_card]//: to know the shortcuts related with Rterm and all others
  - //[What is new #whatisnew]//: to know the news.


**A example of the ``Rprofile.site`` file can be obtained from [SourceForge http://sourceforge.net/forum/forum.php?forum_id=666987]. Just download it and make changes to fit your needs.**


===== If you have any version of Tinn-R (>= 2.2.0.2) installed and configured: =====
 + Uninstall the prior version of Tinn-R 2.X.X.X
 + Install the new version of Tinn-R
 + Run it.


===== If you want to install any old version of Tinn-R (<= 2.0.0.0): =====
- **Downgrading**: ``rename (or delete) the folder where Tinn-R stores the ini files``. The unistall is necessary since Tinn-R does not downgrade automatically. If you encounter any problems while downgrading, check the ini folder and respective files.  
- Download and install Tinn-R
- Install the ``SciViews`` bundle, then type ``guiDDEInstall()`` in R and ``that's all``!
```
> install.packages('SciViews', dep=T)
> guiDDEInstall()
```
- Perhaps the best way to get R to communicate with Tinn-R from the time it is started is to add the following commands to ``../etc/Rprofile.site`` in the R install directory:
```
#===============================================================
# Tinn-R: necessary packages and functions
#===============================================================
library(utils)
necessary = c('svIDE', 'svIO', 'svSocket', 'R2HTML')
installed = necessary %in% installed.packages()[, 'Package']
if (length(necessary[!installed]) >=1)
  install.packages(necessary[!installed], dep = T)

library(svIDE)
library(svIO)
library(svSocket)
library(R2HTML)
guiDDEInstall()
```
- If you chose the latter option ``.../etc/Rprofile.site``, a nice additional functionality is provided by adding the two lines below ``BEFORE`` the ``library(svIDE)`` command:
```
options(IDE = 'C:/Tinn-R/bin/Tinn-R.exe')
options(use.DDE = T)
```

The first line tells R that you want to use Tinn-R as your IDE (Integrated Development Environment).  To make this happen, you should change the path that leads to where ``Tinn-R.exe`` is installed if it happens to be different from the default configuration. The second line indicates that you want to start the DDE server automatically.

By doing this, Tinn-R will start automatically once you invoke R.


==== Focus control ====
===== Working with Rgui =====
- Tinn-R has a icon within the //Options toolbar// [../../../res/focus.png] containing the hint ``Options: return focus to editor after send/control Rgui`` which enables the user to configure the focus control. When ``checked``:
 - If the editor has the focus: it will ``go back`` to the editor after any //send to// or //R control// action;
 - Otherwise, the focus will be set to the Rgui interface.


===== Working with Rterm =====
- The above-mentioned icon will be disabled with Rterm interface. The following will then happen:
 - If the focus is placed on the editor it will ``go back`` to the editor after any //send to// or //R control// action;
 - If the focus is placed on the Rterm (//IO// or //Log//), it will be ``maintened`` in this interface (//IO//);
 - Situations above are also the case when working with two monitors.


==== Rterm interface and debug package ====
- Several changes were made to the debug package (1.0.2) regarding the messaging system (//stdout// and //stderr//). The default option is no longer compatible with Rterm interface implementation.
- The best way to make it compatible again is to add the option below to Rprofile.site file:
```
options(debug.catfile = 'stdout')
```


=== Speller installation ===[configuration_spellerinstalation]
- To install this resource:
 + Close Tinn-R (if it is running);
 + Download the [dictionaries http://www.luziusschneider.com/Speller/English/index.htm] you would like to add to Tinn-R;
 + Install the file (for example ISpEnFrGe.exe);
- Upon start, Tinn-R will recognize all installed dictionaries.  You should choose one as your default.
- Before installing new dictionaries, it is strongly recommended that you close Tinn-R.
- Another useful tool is the ``UserDicEditor`` which enables the editing of dictionaries.


=== Inverse DVI search ===
- Tinn-R is able to perform ``inverse DVI search``. To get this function to work, include in your DVI previewer the path of the binary executable file for Tinn-R along with the parameters for file and line.  For example, using YAP under Miktex, the configuration would be (assuming a default path for Tinn-R):
```
C:\Tinn-R\bin\Tinn-R.exe "%f;%l"
```
 - Please make sure that there is no space between the parameters %f(related to file) and %l(related to line);

[../../../res/yap_01.png]
[../../../res/yap_02.png]

 - Within Tinn-R (//Options/Application/Processing/Latex/DVI//) it is necessary to add the parameter for Miktex compilation: latex -c-style-errors ``--src-specials``;
 - Tinn-R can do all of this automatically by setting the option //Restore default//:
```
latex -c-style-errors --src-specials
and
bibtex --src-specials
```

[../../../res/dvi_parameters.png]


=== Python and Txt2tags ===
- [Txt2tags http://txt2tags.sourceforge.net] [(user guide here) http://txt2tags.sourceforge.net/userguide] converts a text file with ``minimal and human readable markup`` to: HTML, XHTML, SGML, LaTeX, Lout, UNIX man page, Wikipedia, Google Code Wiki, DokuWiki, MoinMoin, MagicPoint (mgp), and PageMaker. It is simple and fast, featuring automatic TOC, macros, filters, include, tools, GUI, CLI, Web interfaces, translations, and extensive documentation.

- Tinn-R works with the interpreter Phyton for Windows (python.exe), using Python scripts to make the conversion (txt2tags).

- To install and configure Python resources, just follow these steps:
 + Download and install the interpreter [Python http://www.python.org/download/] anywhere in your computer;
 + Download and unzip [Txt2tags http://txt2tags.sourceforge.net/] anywhere in your computer;
 + Within Tinn-R, go to ``Options/Application/Processing/Txt2tags`` and add information on parameters (``-t`` is the default), interpreter path (``python.exe``) and the conversor (``txt2tags python script``);

[../../../res/app_processing_conversion_txt2tags.png]


=== Ruby and Deplate ===
- [Deplate http://deplate.sourceforge.net/] [(user guide here) http://deplate.sourceforge.net/deplate.html] is a remote [ruby http://www.ruby-lang.org/en/] based tool for converting documents written in wiki-like markup to LaTeX, HTML, HTML slides, or DocBook format. Deplate supports page templates, embedded LaTeX code, footnotes, citations, bibliographies, automatic generation of indices, tables of contents, among others. Deplate can also be used to create Web pages and, via LaTeX or DocBook, high-quality printouts.

- Tinn-R works with the interpreter Ruby for Windows (ruby.exe) and Ruby scripts to generate file conversation within deplate.

- To install and configure these resources follow these steps:
 + Download and unzip the interpreter [Ruby http://www.ruby-lang.org/en/] anywhere in your computer;
 + Download and unzip [Deplate http://deplate.sourceforge.net/Download.php] anywhere in your computer;
 + Within Tinn-R, go to ``Options/Application/Processing/Deplate`` and add information on parameters (``-f`` is the default), the interpreter path (``ruby.exe``), and the conversor (``deplate.rb ruby script``);

[../../../res/app_processing_conversion_deplate.png]


**We recently observed a problem when converting files with file names with an underscore. For example ``deplate_intro.dplt``. In these cases the file conversion is completed, but Tinn-R won't open the file since it can't find it. This pattern is cause by Deplate (a ruby script) generating a file named ``deplate__intro.html``. //Observe that this file name contains a double underscore//. In sum, for the time being avoid using underscores in file names when you intend to later converting through Deplate.**
